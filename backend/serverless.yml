service: 
  name: sarvarlass-tidi-epp 
app: todo-serverless
custom: 
  dynamodb: 
    stages: 
      - dev
    start: 
      inMemory: true
      migrate: true
functions: 
  Auth: 
    handler: src/lambda/auth/auth0Authorizer.handler
  CreateTodo: 
    events: 
      - 
        http: 
          authorizer: Auth
          cors: true
          method: post
          path: todos
    handler: src/lambda/http/createTodo.handler
    iamRoleStatements: 
      - 
        Action: 
          - "dynamodb:PutItem"
        Effect: Allow
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
    request: 
      schema: 
        application/json: "${file(src/schemas/todo-item-create.json)}"
  DeleteTodo: 
    events: 
      - 
        http: 
          authorizer: Auth
          cors: true
          method: delete
          path: "todos/{todoId}"
    handler: src/lambda/http/deleteTodo.handler
    iamRoleStatements: 
      - 
        Action: 
          - "dynamodb:DeleteItem"
          - "dynamodb:GetItem"
        Effect: Allow
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
  GenerateUploadUrl: 
    events: 
      - 
        http: 
          authorizer: Auth
          cors: true
          method: post
          path: "todos/{todoId}/attachment"
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements: 
      - 
        Action: 
          - "s3:PutObject"
          - "s3:GetObject"
        Effect: Allow
        Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
  GetTodos: 
    events: 
      - 
        http: 
          authorizer: Auth
          cors: true
          method: get
          path: todos
    handler: src/lambda/http/getTodos.handler
    iamRoleStatements: 
      - 
        Action: 
          - "dynamodb:Query"
          - "dynamodb:Scan"
        Effect: Allow
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
      - 
        Action: 
          - "dynamodb:Query"
          - "dynamodb:Scan"
        Effect: Allow
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.INDEX_NAME}"
  UpdateTodo: 
    events: 
      - 
        http: 
          authorizer: Auth
          cors: true
          method: patch
          path: "todos/{todoId}"
    handler: src/lambda/http/updateTodo.handler
    iamRoleStatements: 
      - 
        Action: 
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Effect: Allow
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
    request: 
      schema: 
        application/json: "${file(src/schemas/todo-item-update.json"
org: jacksonmike
plugins: 
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
provider: 
  environment: 
    INDEX_NAME: UserIdIndex
    S3_BUCKET: "serverless-todo-mesa-mjj-${self:provider.stage}"
    SIGNED_URL_EXPIRATION: 300
    TODOS_TABLE: "serverless-todo-mesa-${self:provider.stage}"
  name: aws
  region: "${opt:region, 'us-east-2'}"
  runtime: nodejs12.x
  stage: "${opt:stage, 'dev'}"
resources: 
  Resources: 
    AttachmentBucket: 
      Properties: 
        BucketName: "${self:provider.environment.S3_BUCKET}"
        CorsConfiguration: 
          CorsRules: 
            - 
              AllowedHeaders: 
                - "*"
              AllowedMethods: 
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins: 
                - "*"
              MaxAge: 3000
      Type: "AWS::S3::Bucket"
    BucketPolicy: 
      Properties: 
        Bucket: AttachmentBucket
        PolicyDocument: 
          Id: Policy
          Statement: 
            - 
              Action: 
                - "s3:GetObject"
                - "s3:PutObject"
              Effect: Allow
              Principal: "*"
              Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
              Sid: PublicReadWriteBucketPolicy
          Version: "2012-10-17"
      Type: "AWS::S3::BucketPolicy"
    GatewayResponseDefault4XX: 
      Properties: 
        ResponseParameters: 
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: ApiGatewayRestApi
      Type: "AWS::ApiGateway::GatewayResponse"
    TodoTable: 
      Properties: 
        AttributeDefinitions: 
          - 
            AttributeName: userId
            AttributeType: S
          - 
            AttributeName: createdAt
            AttributeType: S
          - 
            AttributeName: todoId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema: 
          - 
            AttributeName: userId
            KeyType: HASH
          - 
            AttributeName: todoId
            KeyType: RANGE
        LocalSecondaryIndexes: 
          - 
            IndexName: "${self:provider.environment.INDEX_NAME}"
            KeySchema: 
              - 
                AttributeName: userId
                KeyType: HASH
              - 
                AttributeName: createdAt
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
        TableName: "${self:provider.environment.TODOS_TABLE}"
      Type: "AWS::DynamoDB::Table"