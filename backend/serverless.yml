service:
  name: serverless-todo-app

plugins:
  - serverless-s3-local
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  serverless-offline:
    host: 0.0.0.0
    port: 3003
    name: aws
    runtime: nodejs8.10
 

  dynamodb:
    stages:
      - dev 
    start:
      migrate: true
      noStart: true
      host: localstack
      port: 8000

    s3:
      noStart: true
      port: 4572
      host: localstack
      directory: /tmp 

    serverless-iam-roles-per-function:
      defaultInherit: true

    documentation:
      api:
        info: v1.0.0
        title: Serverless TODO app 
        description: Serverless todo application
      models:
        - name: TodoCreate
          contentType: applcation/json
          schema: ${file(models/create-todo-request.json)}
        - name: TodoUpdate
          contentType: application/json
          schema: ${file(models/update-todo-request.json)}

provider:
  name: aws
  runtime: nodejs12.x
  ApiGateway:
    minmumCopressionSizeL 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TODO_TABLE: Todos-${self:provider.stage}
    IMAGES_BUCKET: udacity-todos-finalproject-${self:provider.stage}
    USER_ID_INDEX: userId
  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  enviroment:
    TODOS_TABLE: Todos-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex 
    IMAGES_S3_BUCKET: images-mjj001-${self:provider.stage}
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0secret 
    SIGNED_URL_EXPIRATION: 300
# check these values

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Create a new TODO item 
            description: Create a new TODO item
            requestModels:
              'application/json': TodoCreate
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}          

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a todo item
            description: Update a todo item
            requestModels:
              'application/json': src/lambda/http/updateTodo.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}          

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}      

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: serverless-todo-app-dev-GenerateUploadUrl-lambdaRole       
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    Action:
      - "xray:PutTraceSegments"
      - "xry:putTelemetryRecords"
    Resource:
      - "*"        

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:      
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH 
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
                 


  TodoBucket:AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              
              

#  BucketPolicy:
#    Type: AWS::S3::BucketPolicy
#    Properties:
#      PolicyDocument:
#        Id: MyPolicy
#        Version: "2012-10-17"
#        Statement:
#          - Sid: PublicReadForGetBucketObjects
#           Principal: '*'
#            Action: 's3:GetObject'
#            Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
#      Bucket: !Ref AttachmentsBucket 